{"mappings":"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","sources":["src/shuffle.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-e3a677de5c6d1d21.js","src/timer.js","src/modal.js","node_modules/@parcel/runtime-js/lib/runtime-42a750e5f5c918a0.js","node_modules/@parcel/runtime-js/lib/runtime-d68ea04c24c982ec.js","node_modules/@parcel/runtime-js/lib/runtime-a5a4f073cfd80423.js","node_modules/@parcel/runtime-js/lib/runtime-3919cadb783510cc.js","node_modules/@parcel/runtime-js/lib/runtime-21ffc3d17cce9cb2.js","node_modules/@parcel/runtime-js/lib/runtime-f824c37c66758916.js","node_modules/@parcel/runtime-js/lib/runtime-3ebc0dd341b91da5.js","src/game.js","node_modules/@parcel/runtime-js/lib/runtime-455b50bbe7c4fd4c.js","src/index.js"],"sourcesContent":["function shuffle(array) {\n  let currentIndex = array.length, temporaryValue, randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nexport { shuffle };\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"9vqfN\\\":\\\"index.42984c7d.js\\\",\\\"kkacW\\\":\\\"25-pikachu.9b1d8215.svg\\\",\\\"1TbxJ\\\":\\\"94-gengar.aa73851d.svg\\\",\\\"8WavD\\\":\\\"101-electrode.913c04b0.svg\\\",\\\"fbOWL\\\":\\\"143-snorlax.9844c055.svg\\\",\\\"aiXix\\\":\\\"149-dragonite.59e1e629.svg\\\",\\\"jVXFP\\\":\\\"150-mewtwo.054e76c6.svg\\\",\\\"hByRc\\\":\\\"175-togepi.77f6b592.svg\\\",\\\"idJF6\\\":\\\"202-wobbuffet.f58911bd.svg\\\"}\"));","let min = 0;\nlet sec = 0;\n\nconst startTimer = () => {\n  let leadingZero = '';\n  leadingZero = (sec < 10) ? '0' : '';\n  document.getElementById('ms').innerHTML = leadingZero + sec;\n  sec++;\n\n  if (sec >= 60) {\n    sec = 0;\n    min++;\n    leadingZero = (min < 10) ? '0' : '';\n    document.getElementById('mm').innerHTML = leadingZero + min;\n  }\n};\n\nexport { startTimer };\n","const initModal = () => {\n  const reload = document.querySelector(\".reload-btn\");\n\n  reload.addEventListener('click', () => location.reload());\n\n  const modal = document.getElementById(\"stats-modal\");\n  modal.style.display = 'block';\n\n  window.onclick = (event) => {\n    if (event.target == modal) {\n      modal.style.display = \"none\";\n    }\n  }\n}\n\nexport { initModal }\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"kkacW\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1TbxJ\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"8WavD\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"fbOWL\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"aiXix\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"jVXFP\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"hByRc\")).toString();","import { shuffle } from './shuffle';\nimport { startTimer } from './timer';\nimport { initModal } from './modal';\n\n// images\nimport pikachu from '../images/25-pikachu.svg';\nimport gengar from '../images/94-gengar.svg';\nimport electrode from '../images/101-electrode.svg';\nimport snorlax from '../images/143-snorlax.svg';\nimport dragonite from '../images/149-dragonite.svg';\nimport mewtwo from '../images/150-mewtwo.svg';\nimport togepi from '../images/175-togepi.svg';\nimport wobbuffet from '../images/202-wobbuffet.svg';\n\n\nlet intervalId;\nlet moveCounter = 0;\n\n// Generates the board by creating a Card element for each element in the shuffled array\n// Each card element contains a face element (<img>) and back element (<div>)\n// We add the necesary classes to each element and finally append it to the board\nconst generateBoard = (deck, board) => {\n  // Generate a card for each element in the array\n  deck.forEach((card) => {\n    // Create the <div> element\n    const cardEl = document.createElement('div');\n    // Give <div> class of card\n    cardEl.classList.add('pkm-card');\n    // Create <img> element\n    const imgEl = document.createElement('img');\n    // Set the img src path to have the name of the current iteration\n    imgEl.setAttribute(\"src\", `${card}`);\n    // Give imgEl a class of 'face'\n    imgEl.classList.add('face');\n    // Append <img> to <div>\n    cardEl.appendChild(imgEl);\n\n    // Create 'back' <div> element\n    const back = document.createElement('div');\n    // Give 'back' a class of 'back'\n    back.classList.add('back');\n    // Append 'back' to cardEl <div>\n    cardEl.appendChild(back);\n\n    // Append the cardEl to the board\n    board.appendChild(cardEl);\n  });\n};\n\nconst addStats = () => {\n  // Selectors\n  const modalContent = document.querySelector(\".modal-content\");\n  const minutes = document.getElementById('mm');\n  const seconds = document.getElementById('ms');\n\n  const stats = `<p class='stats'>Time to complete: <span>${minutes.innerText} Minutes and ${seconds.innerText} Seconds</span></p>\n                 <p class='stats'> Moves Taken: <span>${moveCounter}</span</p>\n                `;\n  // Inject html into the modal\n  modalContent.insertAdjacentHTML('beforeend', stats);\n};\n\nconst winGame = () => {\n  // Create a nodeList will all elements that have the \".flip\" class\n  // \"flip\" class adds the flip animation. We use it as the win condition as we dont remove it from the cards that matched\n  const flippedCards = document.querySelectorAll(\".flip\");\n  // if the nodeList contains 16 elements - all the cards\n  if (flippedCards.length === 16) {\n    // Stop the timer\n    clearInterval(intervalId);\n    // Insert HTML to the modal\n    addStats();\n    // Display the modal\n    initModal();\n  }\n};\n\nconst incrementMoveCounter = () => {\n  // Select the move counter element\n  const counter = document.querySelector(\".move-counter\");\n  // Increment the moveCounter variable\n  moveCounter++;\n  // update the HTML with the new value reference in the variable\n  counter.innerHTML = moveCounter;\n};\n\nconst match = (flippedCards) => {\n  flippedCards.forEach((card) => {\n  // For each card remove the \"flipped\" class (logic used to compare flipped cards)\n    card.classList.remove(\"flipped\");\n    // Stop any further mouse clicks on the cards that are matched\n    card.style.pointerEvents = \"none\";\n  });\n  // Allow for further mouse clicks on the rest of the board\n  document.body.style.pointerEvents = \"auto\";\n  // Increment the move counter by 1\n  incrementMoveCounter();\n  // Check to see if the game has been won\n  winGame();\n};\n\nconst noMatch = (flippedCards) => {\n  // For each card remove the \"flipped\" class (logic used to compare flipped cards)and \"flip\" class (animation)\n  flippedCards.forEach((card) => {\n    // Delay the function so that the animation can play correctly\n    // After 1000 miliseconds the two cards will have the class of \"flip\" and \"flipped\" removed\n    setTimeout(() => {\n      card.classList.remove('flipped');\n      card.classList.remove('flip');\n      // Allow for further mouse clicks on the rest of the board\n      document.body.style.pointerEvents = \"auto\";\n    }, 1000);\n  });\n  // Increment the move counter by 1\n  incrementMoveCounter();\n};\n\n// method to check if the elements in the nodeList match\nconst checkCards = (flippedCards) => {\n  // When there are two elements(cards) in the nodeList\n  if (flippedCards.length === 2) {\n    // Disable any further mouse clicks on other cards (affects the whole page because we call on the document obj)\n    document.body.style.pointerEvents = \"none\";\n    // Compare the two images src\n    if (flippedCards[0].firstElementChild.src === flippedCards[1].firstElementChild.src) {\n      // If match call match()\n      match(flippedCards);\n    } else {\n      // If no match call noMatch()\n      noMatch(flippedCards);\n    }\n  }\n};\n\nconst flipCard = () => {\n  // Set the element clicked to a variable (card)\n  const clickedCard = event.target;\n  // Add \"flip\" class to the card that was clicked (\"flip adds the flip animation to the card\")\n  clickedCard.classList.add(\"flip\");\n  // Add \"flipped\" class to the card that was clicked\n  // \"flipped\" class is used for the game logic (comparing the elements with the flipped class)\n  clickedCard.classList.add('flipped');\n  // Create a nodeList with all elements that have the class \"flipped\"\n  const flippedCards = document.querySelectorAll(\".flipped\");\n  // Call the checkCards method passing in the nodeList\n  checkCards(flippedCards);\n};\n\n\nconst initMemoryGame = () => {\n  let timeStart = false;\n  // Array of images\n  const deck = [electrode, electrode, snorlax, snorlax, dragonite, dragonite, mewtwo, mewtwo, togepi, togepi, wobbuffet, wobbuffet, pikachu, pikachu, gengar, gengar];\n  // Selectors\n  const board = document.querySelector(\".board\");\n  const cards = document.querySelectorAll(\".pkm-card\");\n  const reset = document.querySelector(\".reset-btn\");\n\n\n  // Shuffle the elements in the deck variable and store in a variable\n  const shuffledDeck = shuffle(deck);\n\n  // Generate the board with the elements in the shuffled array\n  generateBoard(shuffledDeck, board);\n\n  // Event listeners\n  // Reload page if reset btn is clicked\n  reset.addEventListener('click', () => location.reload() );\n\n  // Adds event listener to the whole board.\n  board.addEventListener('click', (event) => {\n    // If the element clicked is the card..\n    if (event.target.classList.contains(\"pkm-card\")) {\n      // Start the timer after the first click of one card\n      // Executes the timer() function\n      if (timeStart === false) {\n        timeStart = true;\n        intervalId = setInterval(startTimer, 1000);\n      }\n      // Call flipCard method\n      flipCard();\n    }\n  });\n};\n\nexport { initMemoryGame };\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"idJF6\")).toString();","import { initMemoryGame } from './game';\n\ninitMemoryGame();\n"],"names":["$4dd2bcaee905469a$export$448332262467e042","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","id","resolved","Error","parcelRequire","register","JSON","parse","$01ccc13c74d3501f$var$min","$01ccc13c74d3501f$var$sec","$01ccc13c74d3501f$export$5985f5b4428bec55","leadingZero","document","getElementById","innerHTML","$6ecce71d40421a51$export$60523367a7e10402","querySelector","addEventListener","location","reload","modal","style","display","window","onclick","event","target","$d6ebd89db3b8370f$exports","URL","resolve","import","meta","url","toString","$e8195fad8238206e$exports","$af90ae1a75995093$exports","$9ba67aed37e3c541$exports","$13b8af6d7e44fac4$exports","$a95dd43564c2349b$exports","$9b7b24bd5eccfe0b$exports","$4ee2b06a9c1953f0$var$intervalId","$0ec140c2fad22a71$exports","$4ee2b06a9c1953f0$var$moveCounter","$4ee2b06a9c1953f0$var$winGame","querySelectorAll","clearInterval","modalContent","minutes","seconds","stats","innerText","insertAdjacentHTML","$4ee2b06a9c1953f0$var$addStats","$4ee2b06a9c1953f0$var$incrementMoveCounter","counter","$4ee2b06a9c1953f0$var$checkCards","flippedCards","body","pointerEvents","firstElementChild","src","forEach","card","classList","remove","$4ee2b06a9c1953f0$var$match","setTimeout","$4ee2b06a9c1953f0$var$noMatch","timeStart","deck","$parcel$interopDefault","board","reset","cardEl","createElement","add","imgEl","setAttribute","appendChild","back","$4ee2b06a9c1953f0$var$generateBoard","event1","contains","setInterval","clickedCard","$4ee2b06a9c1953f0$var$flipCard"],"version":3,"file":"index.42984c7d.js.map"}